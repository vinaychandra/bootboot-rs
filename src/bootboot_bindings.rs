/* automatically generated by rust-bindgen 0.58.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const BOOTBOOT_MAGIC: &'static [u8; 5usize] = b"BOOT\0";
pub const BOOTBOOT_MMIO: i32 = -134217728;
pub const BOOTBOOT_FB: i32 = -67108864;
pub const BOOTBOOT_INFO: i32 = -2097152;
pub const BOOTBOOT_ENV: i32 = -2093056;
pub const BOOTBOOT_CORE: i32 = -2088960;
pub const PROTOCOL_MINIMAL: u32 = 0;
pub const PROTOCOL_STATIC: u32 = 1;
pub const PROTOCOL_DYNAMIC: u32 = 2;
pub const PROTOCOL_BIGENDIAN: u32 = 128;
pub const LOADER_BIOS: u32 = 0;
pub const LOADER_UEFI: u32 = 4;
pub const LOADER_RPI: u32 = 8;
pub const LOADER_COREBOOT: u32 = 12;
pub const FB_ARGB: u32 = 0;
pub const FB_RGBA: u32 = 1;
pub const FB_ABGR: u32 = 2;
pub const FB_BGRA: u32 = 3;
pub const MMAP_USED: u32 = 0;
pub const MMAP_FREE: u32 = 1;
pub const MMAP_ACPI: u32 = 2;
pub const MMAP_MMIO: u32 = 3;
pub const INITRD_MAXSIZE: u32 = 16;
pub type __u_char = cty::c_uchar;
pub type __u_short = cty::c_ushort;
pub type __u_int = cty::c_uint;
pub type __u_long = cty::c_ulong;
pub type __int8_t = cty::c_schar;
pub type __uint8_t = cty::c_uchar;
pub type __int16_t = cty::c_short;
pub type __uint16_t = cty::c_ushort;
pub type __int32_t = cty::c_int;
pub type __uint32_t = cty::c_uint;
pub type __int64_t = cty::c_long;
pub type __uint64_t = cty::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = cty::c_long;
pub type __u_quad_t = cty::c_ulong;
pub type __intmax_t = cty::c_long;
pub type __uintmax_t = cty::c_ulong;
pub type __dev_t = cty::c_ulong;
pub type __uid_t = cty::c_uint;
pub type __gid_t = cty::c_uint;
pub type __ino_t = cty::c_ulong;
pub type __ino64_t = cty::c_ulong;
pub type __mode_t = cty::c_uint;
pub type __nlink_t = cty::c_ulong;
pub type __off_t = cty::c_long;
pub type __off64_t = cty::c_long;
pub type __pid_t = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [cty::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = cty::c_long;
pub type __rlim_t = cty::c_ulong;
pub type __rlim64_t = cty::c_ulong;
pub type __id_t = cty::c_uint;
pub type __time_t = cty::c_long;
pub type __useconds_t = cty::c_uint;
pub type __suseconds_t = cty::c_long;
pub type __daddr_t = cty::c_int;
pub type __key_t = cty::c_int;
pub type __clockid_t = cty::c_int;
pub type __timer_t = *mut cty::c_void;
pub type __blksize_t = cty::c_long;
pub type __blkcnt_t = cty::c_long;
pub type __blkcnt64_t = cty::c_long;
pub type __fsblkcnt_t = cty::c_ulong;
pub type __fsblkcnt64_t = cty::c_ulong;
pub type __fsfilcnt_t = cty::c_ulong;
pub type __fsfilcnt64_t = cty::c_ulong;
pub type __fsword_t = cty::c_long;
pub type __ssize_t = cty::c_long;
pub type __syscall_slong_t = cty::c_long;
pub type __syscall_ulong_t = cty::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut cty::c_char;
pub type __intptr_t = cty::c_long;
pub type __socklen_t = cty::c_uint;
pub type __sig_atomic_t = cty::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = cty::c_schar;
pub type int_fast16_t = cty::c_long;
pub type int_fast32_t = cty::c_long;
pub type int_fast64_t = cty::c_long;
pub type uint_fast8_t = cty::c_uchar;
pub type uint_fast16_t = cty::c_ulong;
pub type uint_fast32_t = cty::c_ulong;
pub type uint_fast64_t = cty::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct MMapEnt {
    pub ptr: u64,
    pub size: u64,
}
#[test]
fn bindgen_test_layout_MMapEnt() {
    assert_eq!(
        ::core::mem::size_of::<MMapEnt>(),
        16usize,
        concat!("Size of: ", stringify!(MMapEnt))
    );
    assert_eq!(
        ::core::mem::align_of::<MMapEnt>(),
        1usize,
        concat!("Alignment of ", stringify!(MMapEnt))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MMapEnt>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MMapEnt),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MMapEnt>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MMapEnt),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct BOOTBOOT {
    pub magic: [u8; 4usize],
    pub size: u32,
    pub protocol: u8,
    pub fb_type: u8,
    pub numcores: u16,
    pub bspid: u16,
    pub timezone: i16,
    pub datetime: [u8; 8usize],
    pub initrd_ptr: u64,
    pub initrd_size: u64,
    pub fb_ptr: u64,
    pub fb_size: u32,
    pub fb_width: u32,
    pub fb_height: u32,
    pub fb_scanline: u32,
    pub arch: BOOTBOOT__bindgen_ty_1,
    pub mmap: MMapEnt,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union BOOTBOOT__bindgen_ty_1 {
    pub x86_64: BOOTBOOT__bindgen_ty_1__bindgen_ty_1,
    pub aarch64: BOOTBOOT__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BOOTBOOT__bindgen_ty_1__bindgen_ty_1 {
    pub acpi_ptr: u64,
    pub smbi_ptr: u64,
    pub efi_ptr: u64,
    pub mp_ptr: u64,
    pub unused0: u64,
    pub unused1: u64,
    pub unused2: u64,
    pub unused3: u64,
}
#[test]
fn bindgen_test_layout_BOOTBOOT__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<BOOTBOOT__bindgen_ty_1__bindgen_ty_1>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<BOOTBOOT__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BOOTBOOT__bindgen_ty_1__bindgen_ty_1>())).acpi_ptr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(acpi_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BOOTBOOT__bindgen_ty_1__bindgen_ty_1>())).smbi_ptr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(smbi_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BOOTBOOT__bindgen_ty_1__bindgen_ty_1>())).efi_ptr as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(efi_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BOOTBOOT__bindgen_ty_1__bindgen_ty_1>())).mp_ptr as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(mp_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BOOTBOOT__bindgen_ty_1__bindgen_ty_1>())).unused0 as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(unused0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BOOTBOOT__bindgen_ty_1__bindgen_ty_1>())).unused1 as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(unused1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BOOTBOOT__bindgen_ty_1__bindgen_ty_1>())).unused2 as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(unused2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BOOTBOOT__bindgen_ty_1__bindgen_ty_1>())).unused3 as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(unused3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BOOTBOOT__bindgen_ty_1__bindgen_ty_2 {
    pub acpi_ptr: u64,
    pub mmio_ptr: u64,
    pub efi_ptr: u64,
    pub unused0: u64,
    pub unused1: u64,
    pub unused2: u64,
    pub unused3: u64,
    pub unused4: u64,
}
#[test]
fn bindgen_test_layout_BOOTBOOT__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::core::mem::size_of::<BOOTBOOT__bindgen_ty_1__bindgen_ty_2>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<BOOTBOOT__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BOOTBOOT__bindgen_ty_1__bindgen_ty_2>())).acpi_ptr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(acpi_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BOOTBOOT__bindgen_ty_1__bindgen_ty_2>())).mmio_ptr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(mmio_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BOOTBOOT__bindgen_ty_1__bindgen_ty_2>())).efi_ptr as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(efi_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BOOTBOOT__bindgen_ty_1__bindgen_ty_2>())).unused0 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(unused0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BOOTBOOT__bindgen_ty_1__bindgen_ty_2>())).unused1 as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(unused1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BOOTBOOT__bindgen_ty_1__bindgen_ty_2>())).unused2 as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(unused2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BOOTBOOT__bindgen_ty_1__bindgen_ty_2>())).unused3 as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(unused3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BOOTBOOT__bindgen_ty_1__bindgen_ty_2>())).unused4 as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(unused4)
        )
    );
}
#[test]
fn bindgen_test_layout_BOOTBOOT__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<BOOTBOOT__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(BOOTBOOT__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<BOOTBOOT__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(BOOTBOOT__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BOOTBOOT__bindgen_ty_1>())).x86_64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT__bindgen_ty_1),
            "::",
            stringify!(x86_64)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BOOTBOOT__bindgen_ty_1>())).aarch64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT__bindgen_ty_1),
            "::",
            stringify!(aarch64)
        )
    );
}
#[test]
fn bindgen_test_layout_BOOTBOOT() {
    assert_eq!(
        ::core::mem::size_of::<BOOTBOOT>(),
        144usize,
        concat!("Size of: ", stringify!(BOOTBOOT))
    );
    assert_eq!(
        ::core::mem::align_of::<BOOTBOOT>(),
        1usize,
        concat!("Alignment of ", stringify!(BOOTBOOT))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BOOTBOOT>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BOOTBOOT>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BOOTBOOT>())).protocol as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT),
            "::",
            stringify!(protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BOOTBOOT>())).fb_type as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT),
            "::",
            stringify!(fb_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BOOTBOOT>())).numcores as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT),
            "::",
            stringify!(numcores)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BOOTBOOT>())).bspid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT),
            "::",
            stringify!(bspid)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BOOTBOOT>())).timezone as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT),
            "::",
            stringify!(timezone)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BOOTBOOT>())).datetime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT),
            "::",
            stringify!(datetime)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BOOTBOOT>())).initrd_ptr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT),
            "::",
            stringify!(initrd_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BOOTBOOT>())).initrd_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT),
            "::",
            stringify!(initrd_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BOOTBOOT>())).fb_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT),
            "::",
            stringify!(fb_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BOOTBOOT>())).fb_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT),
            "::",
            stringify!(fb_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BOOTBOOT>())).fb_width as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT),
            "::",
            stringify!(fb_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BOOTBOOT>())).fb_height as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT),
            "::",
            stringify!(fb_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BOOTBOOT>())).fb_scanline as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT),
            "::",
            stringify!(fb_scanline)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BOOTBOOT>())).arch as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BOOTBOOT>())).mmap as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(BOOTBOOT),
            "::",
            stringify!(mmap)
        )
    );
}
